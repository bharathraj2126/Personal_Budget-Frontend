"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendVerifyFunction = exports.patchClass = exports.requireFromPathToLinterJS = exports.write = exports.prune = exports.shouldBulkSuppress = void 0;
const fs_1 = __importDefault(require("fs"));
const Guards = __importStar(require("./ast-guards"));
const _patch_base_1 = require("../_patch-base");
const constants_1 = require("./constants");
const bulk_suppressions_file_1 = require("./bulk-suppressions-file");
const ESLINTRC_FILENAMES = [
    '.eslintrc.js',
    '.eslintrc.cjs'
    // Several other filenames are allowed, but this patch requires that it be loaded via a JS config file,
    // so we only need to check for the JS-based filenames
];
const SUPPRESSION_SYMBOL = Symbol('suppression');
const ESLINT_BULK_SUPPRESS_ENV_VAR_VALUE = process.env[constants_1.ESLINT_BULK_SUPPRESS_ENV_VAR_NAME];
const SUPPRESS_ALL_RULES = ESLINT_BULK_SUPPRESS_ENV_VAR_VALUE === '*';
const RULES_TO_SUPPRESS = ESLINT_BULK_SUPPRESS_ENV_VAR_VALUE
    ? new Set(ESLINT_BULK_SUPPRESS_ENV_VAR_VALUE.split(','))
    : undefined;
function getNodeName(node) {
    if (Guards.isClassDeclarationWithName(node)) {
        return node.id.name;
    }
    else if (Guards.isFunctionDeclarationWithName(node)) {
        return node.id.name;
    }
    else if (Guards.isClassExpressionWithName(node)) {
        return node.id.name;
    }
    else if (Guards.isFunctionExpressionWithName(node)) {
        return node.id.name;
    }
    else if (Guards.isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node)) {
        return node.id.name;
    }
    else if (Guards.isNormalObjectPropertyWithAnonymousExpressionAssigned(node)) {
        return node.key.name;
    }
    else if (Guards.isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node)) {
        return node.key.name;
    }
    else if (Guards.isNormalAssignmentPatternWithAnonymousExpressionAssigned(node)) {
        return node.left.name;
    }
    else if (Guards.isNormalMethodDefinition(node)) {
        return node.key.name;
    }
    else if (Guards.isTSEnumDeclaration(node)) {
        return node.id.name;
    }
    else if (Guards.isTSInterfaceDeclaration(node)) {
        return node.id.name;
    }
    else if (Guards.isTSTypeAliasDeclaration(node)) {
        return node.id.name;
    }
}
function calculateScopeId