declare namespace matchers {
    interface TestingLibraryMatchers<E, R> extends Record<string, any> {
        /**
         * @deprecated
         * since v1.9.0
         * @description
         * Assert whether a value is a DOM element, or not. Contrary to what its name implies, this matcher only checks
         * that you passed to it a valid DOM element.
         *
         * It does not have a clear definition of what "the DOM" is. Therefore, it does not check whether that element
         * is contained anywhere.
         * @see
         * [testing-library/jest-dom#toBeInTheDom](https://github.com/testing-library/jest-dom#toBeInTheDom)
         */
        toBeInTheDOM(container?: HTMLElement | SVGElement): R;
        /**
         * @description
         * Assert whether an element is present in the document or not.
         * @example
         * <svg data-testid="svg-element"></svg>
         *
         * expect(queryByTestId('svg-element')).toBeInTheDocument()
         * expect(queryByTestId('does-not-exist')).not.toBeInTheDocument()
         * @see
         * [testing-library/jest-dom#tobeinthedocument](https://github.com/testing-library/jest-dom#tobeinthedocument)
         */
        toBeInTheDocument(): R;
        /**
         * @description
         * This allows you to check if an element is currently visible to the user.
         *
         * An element is visible if **all** the following conditions are met:
         * * it does not have its css property display set to none
         * * it does not have its css property visibility set to either hidden or collapse
         * * it does not have its css property opacity set to 0
         * * its parent element is also visible (and so on up to the top of the DOM tree)
         * * it does not have the hidden attribute
         * * if `<details />` it has the open attribute
         * @example
         * <div
         *   data-testid="zero-opacity"
         *   style="opacity: 0"
         * >
         *   Zero Opacity
         * </div>
         *
         * <div data-testid="visible">Visible Example</div>
         *
         * expect(getByTestId('zero-opacity')).not.toBeVisible()
         * expect(getByTestId('visible')).toBeVisible()
         * @see
         * [testing-library/jest-dom#tobevisible](https://github.com/testing-library/jest-dom#tobevisible)
         */
        toBeVisible(): R;
        /**
         * @deprecated
         * since v5.9.0
         * @description
         * Assert whether an element has content or not.
         * @example
         * <span data-testid="not-empty">
         *   <span data-testid="empty"></span>
         * </span>
         *
         * expect(getByTestId('empty')).toBeEmpty()
         * expect(getByTestId('not-empty')).not.toBeEmpty()
         * @see
         * [testing-library/jest-dom#tobeempty](https://github.com/testing-library/jest-dom#tobeempty)
         */
        toBeEmpty(): R;
        /**
         * @description
         * Assert whether an element has content or not.
         * @example
         * <span data-testid="not-empty">
         *   <span data-testid="empty"></span>
         * </span>
         *
         * expect(getByTestId('empty')).toBeEmptyDOMElement()
         * expect(getByTestId('not-empty')).not.toBeEmptyDOMElement()
         * @see
         * [testing-library/jest-dom#tobeemptydomelement](https://github.com/testing-library/jest-dom#tobeemptydomelement)
         */
        toBeEmptyDOMElement(): R;
        /**
         * @description
         * Allows you to check whether an element is disabled from the user's perspective.
         *
         * Matches if the element is a form control and the `disabled` attribute is specified on this element or the
         * element is a descendant of a form element with a `disabled` attribute.
         * @example
         * <button
         *   data-testid="button"
         *   type="submit"
         *   disabled
         * >
         *   submit
         * </button>
         *
         * expect(getByTestId('button')).toBeDisabled()
         * @see
         * [testing-library/jest-dom#tobedisabled](https://github.com/testing-library/jest-dom#tobedisabled)
         */
        toBeDisabled(): R;
        /**
         * @description
         * Allows you to check whether an element is not disabled from the user's perspective.
         *
         * Works like `not.toBeDisabled()`.
         *
         * Use this matcher to avoid double negation in your tests.
         * @example
         * <button
         *   data-testid="button"
         *   type="submit"
         * >
         *   submit
         * </button>
         *
         * expect(getByTestId('button')).toBeEnabled()
         * @see
         * [testing-library/jest-dom#tobeenabled](https://github.com/testing-library/jest-dom#tobeenabled)
         */
        toBeEnabled(): R;
        /**
         * @description
         * Check if a form element, or the entire `form`, is currently invalid.
         *
         * An `input`, `select`, `textarea`, or `form` element is invalid if it has an `aria-invalid` attribute with no
         * value or a value of "true", or if the result of `checkValidity()` is false.
         * @example
         * <input data-testid="no-aria-invalid" />
         *
         * <form data-testid="invalid-form">
         *   <input required />
         * </form>
         *
         * expect(getByTestId('no-aria-invalid')).not.toBeInvalid()
         * expect(getByTestId('invalid-form')).toBeInvalid()
         * @see
         * [testing-library/jest-dom#tobeinvalid](https://github.com/testing-library/jest-dom#tobeinvalid)
         */
        toBeInvalid(): R;
        /**
         * @description
         * This allows you to check if a form element is currently required.
         *
         * An element is required if it is having a `required` or `aria-required="true"` attribute.
         * @example
         * <input data-testid="required-input" required />
         * <div
         *   data-testid="supported-role"
         *   role="tree"
         *   required />
         *
         * expect(getByTestId('required-input')).toBeRequired()
         * expect(getByTestId('supported-role')).not.toBeRequired()
         * @see
         * [testing-library/jest-dom#toberequired](https://github.com/testing-library/jest-dom#toberequired)
         */
        toBeRequired(): R;
        /**
         * @description
         * Allows you to check if a form element is currently required.
         *
         * An `input`, `select`, `textarea`, or `form` element is invalid if it has an `aria-invalid` attribute with no
         * value or a value of "false", or if the result of `checkValidity()` is true.
         * @example
         * <input data-testid="aria-invalid" aria-invalid />
         *
         * <form data-testid="valid-form">
         *   <input />
         * </form>
         *
         * expect(getByTestId('no-aria-invalid')).not.toBeValid()
         * expect(getByTestId('invalid-form')).toBeInvalid()
         * @see
         * [testing-library/jest-dom#tobevalid](https://github.com/testing-library/jest-dom#tobevalid)
         */
        toBeValid(): R;
        /**
         * @description
         * Allows you to assert whether an element contains another element as a descendant or not.
         * @example
         * <span data-testid="ancestor">
         *   <span data-testid="descendant"></span>
         * </span>
         *
         * const ancestor = getByTestId('ancestor')
         * const descendant = getByTestId('descendant')
         * const nonExistantElement = getByTestId('does-not-exist')
         * expect(ancestor).toContainElement(descendant)
         * expect(descendant).not.toContainElement(ancestor)
         * expect(ancestor).not.toContainElement(nonExistantElement)
         * @see
         * [testing-library/jest-dom#tocontainelement](https://github.com/testing-library/jest-dom#tocontainelement)
         */
        toContainElement(element: HTMLElement | SVGElement | null): R;
        /**
         * @description
         * Assert whether a string representing a HTML element is contained in another element.
         * @example
         * <span data-testid="parent"><span data-testid="child"></span></span>
         *
         * expect(getByTestId('parent')).toContainHTML('<span data-testid="child"></span>')
         * @see
         * [testing-library/jest-dom#tocontainhtml](https://github.com/testing-library/jest-dom#tocontainhtml)
         */
        toContainHTML(htmlText: string): R;
        /**
         * @description
         * Allows you to check if a given element has an attribute or not.
         *
         * You can also optionally check that the attribute has a specific expected value or partial match using
         * [expect.stringContaining](https://jestjs.io/docs/en/expect.html#expectnotstringcontainingstring) or
         * [expect.stringMatching](https://jestjs.io/docs/en/expect.html#expectstringmatchingstring-regexp).
         * @example
         * <button
         *   data-testid="ok-button"
         *   type="submit"
         *   disabled
         * >
         *   ok
         * </button>
         *
         * expect(button).toHaveAttribute('disabled')
         * expect(button).toHaveAttribute('type', 'submit')
         * expect(button).not.toHaveAttribute('type', 'button')
         * @see
         * [testing-library/jest-dom#tohaveattribute](https://github.com/testing-library/jest-dom#tohaveattribute)
         */
        toHaveAttribute(attr: string, value?: unknown): R;
        /**
         * @description
         * Check whether the given element has certain classes within its `class` attribute.
         *
         * You must provide at least one class, unless you are asserting that an element does not have any classes.
         * @example
         * <button
         *   data-testid="delete-button"
         *   class="btn xs btn-danger"
         * >
         *   delete item
         * </button>
         *
         * <div data-testid="no-classes">no classes</div>
         *
         * const deleteButton = getByTestId('delete-button')
         * const noClasses = getByTestId('no-classes')
         * expect(deleteButton).toHaveClass('btn')
         * expect(deleteButton).toHaveClass('btn-danger xs')
         * expect(deleteButton).toHaveClass('btn xs btn-danger', {exact: true})
         * expect(deleteButton).not.toHaveClass('btn xs btn-danger', {exact: true})
         * expect(noClasses).not.toHaveClass()
         * @see
         * [testing-library/jest-dom#tohaveclass](https://github.com/testing-library/jest-dom#tohaveclass)
         */
        toHaveClass(...classNames: string[]): R;
        toHaveClass(classNames: string, options?: { exact: boolean }): R;
        /**
         * @description
         * This allows you to check whether the given form element has the specified displayed value (the one the
         * end user will see). It accepts <input>, <select> and <textarea> elements with the exception of <input type="checkbox">
         * and <input type="radio">, which can be meaningfully matched only using toBeChecked or toHaveFormValues.
         * @example
         * <label for="input-example">First name</label>
         * <input type="text" id="input-example" value="Luca" />
         *
         * <label for="textarea-example">Description</label>
         * <textarea id="textarea-example">An example description here.</textarea>
         *
         * <label for="single-select-example">Fruit</label>
         * <select id="single-select-example">
         *   <option value="">Select a fruit...</option>
         *   <option value="banana">Banana</option>
         *   <option value="ananas">Ananas</option>
         *   <option value="avocado">Avocado</option>
         * </select>
         *
         * <label for="mutiple-select-example">Fruits</label>
         * <select id="multiple-select-example" multiple>
         *   <option value="">Select a fruit...</option>
         *   <option value="banana" selected>Banana</option>
         *   <option value="ananas">Ananas</option>
         *   <option value="avocado" selected>Avocado</option>
         * </select>
         *
         * const input = screen.getByLabelText('First name')
         * const textarea = screen.getByLabelText('Description')
         * const selectSingle = screen.getByLabelText('Fruit')
         * const selectMultiple = screen.getByLabelText('Fruits')
         *
         * expect(input).toHaveDisplayValue('Luca')
         * expect(textarea).toHaveDisplayValue('An example description here.')
         * expect(selectSingle).toHaveDisplayValue('Select a fruit...')
         * expect(selectMultiple).toHaveDisplayValue(['Banana', 'Avocado'])
         *
         * @see
         * [testing-library/jest-dom#tohavedisplayvalue](https://github.com/testing-library/jest-dom#tohavedisplayvalue)
         */
        toHaveDisplayValue(value: string | RegExp